/**
 * ================
 * Radios to slider
 * ================
 *
 * Markup :
 *
 * div.radioslider
 *     div.radioslider__option
 *           input.radioslider__input
 *           label.radioslider__label
 *               span.radioslider__dot
 *               span.radioslider__text
 *     div.radioslider__bar
 *         div.radioslider__fill
 *               span.radioslider__knob
 */
@import "mixins";
$radioslider: (
    bar-color:  hsl(0, 0%, 90%),
    fill-color: hsl(220, 100%, 60%),
    knob-color: hsl(220, 100%, 30%),
    default: (
        dot-size: 1.5em, // Dots width and height
        bar-padding: 0.25em, // bar padding
        bar-margin-bottom: 1em, // Distance between bar and labels
    ),
    small: (
        dot-size: 0.5em,
        bar-padding: 0.15em,
        bar-margin-bottom: 1em,
    ),
    tiny: (
        dot-size: 0.2em,
        bar-padding: 0.1em,
        bar-margin-bottom: 1em,
    )
);


/* =========
   Container
   ========= */

.radioslider,
.radioslider * {
    box-sizing: border-box;
    &:before,
    &:after {
        box-sizing: border-box;
    }
}

.radioslider {

    /* Color variables */
    --bar-color: #{map-get($radioslider, bar-color)};
    --fill-color: #{map-get($radioslider, fill-color)};
    --knob-color: #{map-get($radioslider, knob-color)};

    /* Default size variables */
    --dot-size: #{map-deep-get($radioslider, default, dot-size)};
    --bar-padding: #{map-deep-get($radioslider, default, bar-padding)};
    --bar-margin-bottom: #{map-deep-get($radioslider, default, bar-margin-bottom)};
    --bar-height: calc(var(--bar-padding)*2 + var(--dot-size));

    position: relative;
    display: flex;
    justify-content: space-between;
    padding: map-deep-get($radioslider, default, bar-padding); // old browsers
    padding: var(--bar-padding);
    padding-bottom: 0;
    margin-bottom: 1em;


    /* ========================
       Options, inputs & labels
       ======================== */


    // Radio inputs and labels container
    &__option {
        z-index: 1;
        flex: 1 0 0px; /* 0px flex basis to force equal widths */
        display: flex;
        justify-content: center;
    }

    // Radio inputs
    &__input {
        @extend .visually-hidden;

        // Checked state
        &:checked + .radioslider__label {
            font-weight: bold;

            .radioslider__dot {
                background-color: map-get($radioslider, knob-color);; // old browsers
                background-color: var(--knob-color);
            }
        }
    }

    // Labels
    &__label {
        display: flex;
        flex-flow: column;
        align-items: center;
        cursor: pointer;

        // Hover & focus states
        &:hover,
        &:focus,
        &:focus-within {
            .radioslider__dot {
                transform: scale(1.25);
                box-shadow: 0 0.1em 0.2em hsla(0, 0%, 0%, 0.25);
            }
        }

        // Lower then the checked input
        &.lower {
            .radioslider__dot {
                opacity: 0.2;
            }
        }

        // Active state : see `input:checked` instead
        &.active {}
    }

    // Labels dots
    // They visually replace the radio inputs
    &__dot {
        display: block;
        width: map-deep-get($radioslider, default, dot-size); // old browser
        height: map-deep-get($radioslider, default, dot-size); // old browser
        width: var(--dot-size);
        height: var(--dot-size);
        background-color: white;
        border-radius: 99em;
        transition: all 0.2s;
    }

    // Labels text
    &__content {
        display: block;
        margin-top: map-deep-get($radioslider, default, bar-padding) + map-deep-get($radioslider, default, bar-margin-bottom);
        margin-top: calc(var(--bar-padding) + var(--bar-margin-bottom));
        word-break: break-all;
        overflow-wrap: anywhere; /* better than word-break, when supported */
        text-align: center;
    }


    /* =================
       Bar + fill + knob
       ================= */


    &__bar {
        z-index: 0;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: map-deep-get($radioslider, default, dot-size) + (map-deep-get($radioslider, default, bar-padding) * 2); // old browsers
        height: calc(var(--dot-size) + (var(--bar-padding) * 2));
        border-radius: 99em;
        background-color: map-get($radioslider, bar-color);; // old browsers
        background-color: var(--bar-color);
    }

    &__fill {
        pointer-events: none;
        visibility: hidden;
        position: absolute;
        height: 100%;
        border-radius: 99em;
        background-color: map-get($radioslider, fill-color);; // old browsers
        background-color: var(--fill-color);

        // When the `animation` option is enabled
        &.transition-enabled {
            transition: 0.2s;
        }
    }

    &__knob {
        float: right;
        width: map-deep-get($radioslider, default, dot-size) + (map-deep-get($radioslider, default, bar-padding) * 2); // old browsers
        width: calc(var(--dot-size) + (var(--bar-padding) * 2));
        height: map-deep-get($radioslider, default, dot-size) + (map-deep-get($radioslider, default, bar-padding) * 2); // old browsers
        height: calc(var(--dot-size) + (var(--bar-padding) * 2));
        background-color: map-get($radioslider, knob-color);; // old browsers
        background-color: var(--knob-color);
        border-radius: 99em;
    }

    /* ========
       Disabled
       ======== */

    &.disabled {
        .radioslider__input,
        .radioslider__label {
            pointer-events: none;
        }
        .radioslider__option {
            cursor: not-allowed;
        }
    }

    /* ===========
       Fit borders
       =========== */

    &.fit-borders {
        .radioslider__option {
            flex-grow: 0;
        }
        // Arbitrary larger width for label text
        .radioslider__content {
            width: 400%;
        }
    }

    /* ============
       Size : small
       ============ */

    &.small {

        // Size variables
        --dot-size: #{map-deep-get($radioslider, small, dot-size)};
        --bar-padding: #{map-deep-get($radioslider, small, bar-padding)};
        --bar-margin-bottom: #{map-deep-get($radioslider, small, bar-margin-bottom)};

        .radioslider__dot {
            width: map-deep-get($radioslider, small, dot-size); // old browser
            height: map-deep-get($radioslider, small, dot-size); // old browser
            width: var(--dot-size);
            height: var(--dot-size);
        }

        .raioslider__content {
            margin-top: map-deep-get($radioslider, small, bar-padding) + map-deep-get($radioslider, small, bar-margin-bottom);
            margin-top: calc(var(--bar-padding) + var(--bar-margin-bottom));
        }

        .raioslider__bar {
            height: map-deep-get($radioslider, small, dot-size) + (map-deep-get($radioslider, small, bar-padding) * 2); // old browsers
            height: calc(var(--dot-size) + (var(--bar-padding) * 2));
        }

        .radioslider__knob {
            width: map-deep-get($radioslider, small, dot-size) + (map-deep-get($radioslider, small, bar-padding) * 2); // old browsers
            width: calc(var(--dot-size) + (var(--bar-padding) * 2));
            height: map-deep-get($radioslider, small, dot-size) + (map-deep-get($radioslider, small, bar-padding) * 2); // old browsers
            height: calc(var(--dot-size) + (var(--bar-padding) * 2));
        }
    }

    /* ===========
        Size : tiny
        =========== */

    &.tiny {

        // Size variables
        --dot-size: #{map-deep-get($radioslider, tiny, dot-size)};
        --bar-padding: #{map-deep-get($radioslider, tiny, bar-padding)};
        --bar-margin-bottom: #{map-deep-get($radioslider, tiny, bar-margin-bottom)};

        .radioslider__dot {
            width: map-deep-get($radioslider, tiny, dot-size); // old browser
            height: map-deep-get($radioslider, tiny, dot-size); // old browser
            width: var(--dot-size);
            height: var(--dot-size);
        }

        .radioslider__content {
            margin-top: map-deep-get($radioslider, tiny, bar-padding) + map-deep-get($radioslider, tiny, bar-margin-bottom);
            margin-top: calc(var(--bar-padding) + var(--bar-margin-bottom));
        }

        .radioslider__bar {
            height: map-deep-get($radioslider, tiny, dot-size) + (map-deep-get($radioslider, tiny, bar-padding) * 2); // old browsers
            height: calc(var(--dot-size) + (var(--bar-padding) * 2));
        }

        .radioslider__knob {
            $factor: 4;
            width: (map-deep-get($radioslider, tiny, dot-size) + (map-deep-get($radioslider, tiny, bar-padding) * 2)) * $factor; // old browsers
            width: calc((var(--dot-size) + (var(--bar-padding) * 2)) * #{$factor});
            height: (map-deep-get($radioslider, tiny, dot-size) + (map-deep-get($radioslider, tiny, bar-padding) * 2)) * $factor; // old browsers
            height: calc((var(--dot-size) + (var(--bar-padding) * 2)) * #{$factor});
            transform: translateY(calc(-50% + (var(--bar-height)/2)));
        }
    }

}

/* Accessible method to hide content */
.visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    clip-path: polygon(0 0, 0 0, 0 0, 0 0);
    height: auto; /* new - was 1px */
    margin: 0; /* new - was -1px */
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap; /* 1 */
}